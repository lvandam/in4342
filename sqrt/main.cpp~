#include "meanshift.h"
#include "Timer.h"
#include <iostream>

#ifndef ARMCC
#include "markers.h"
#endif


float sqrt1(const float x)  
 {
 	// Source: https://www.codeproject.com/Articles/69941/Best-Square-Root-Method-Algorithm-Function-Precisi
   union
   {
     int i;
     float x;
   } u;
   u.x = x;
   u.i = (1<<29) + (u.i >> 1) - (1<<22); 
    
   u.x =       u.x + x/u.x;
   u.x = 0.25f*u.x + x/u.x;
 
   return u.x;
}


// This is InvSqrt, fast inverse sqrt algorithm
float sqrt2a(float x){
	// source: https://betterexplained.com/articles/understanding-quakes-fast-inverse-square-root/
	float input = x;
    float xhalf = 0.5f * x;
    int i = *(int*)&x;            // store floating-point bits in integer
    i = 0x5f3759df - (i >> 1);    // initial guess for Newton's method
    x = *(float*)&i;              // convert new bits into float
    x = x*(1.5f - xhalf*x*x);     // One round of Newton's method
    return x * input;
}

float sqrt2b(float x){
	// source: https://betterexplained.com/articles/understanding-quakes-fast-inverse-square-root/
	float input = x;
    float xhalf = 0.5f * x;
    int i = *(int*)&x;            // store floating-point bits in integer
    i = 0x5f3759df - (i >> 1);    // initial guess for Newton's method
    x = *(float*)&i;              // convert new bits into float
    //x = x*(1.5f - xhalf*x*x);     // One round of Newton's method
    return x * input;
}

float sqrt3(const float x)  
{
	// Source: https://www.codeproject.com/Articles/69941/Best-Square-Root-Method-Algorithm-Function-Precisi
  union
  {
    int i;
    float x;
  } u;

  u.x = x;
  u.i = (1<<29) + (u.i >> 1) - (1<<22); 
  return u.x;
} 



int main(int argc, char ** argv)
{
    Timer totalTimer("Total Time");

    cv::VideoCapture frame_capture;
    if(argc<2)
    {
        std::cout <<"specifiy an input video file to track" << std::endl;
        std::cout <<"Usage:  ./" << argv[0] << " car.avi" << std::endl;
        return -1;
    }
    else
    {
        frame_capture = cv::VideoCapture( argv[1] );
    }

    // this is used for testing the car video
    // instead of selection of object of interest using mouse
    cv::Rect rect(228,367,86,58);
    cv::Mat frame;
    frame_capture.read(frame);
    
    MeanShift ms; // creat meanshift obj
    ms.Init_target_frame(frame,rect); // init the meanshift

    int codec = CV_FOURCC('F', 'L', 'V', '1');
    cv::VideoWriter writer("tracking_result.avi", codec, 20, cv::Size(frame.cols,frame.rows));

    totalTimer.Start();
    #ifndef ARMCC
    MCPROF_START();
    #endif
    int TotalFrames = 32;
    int fcount;
    //for(fcount=0; fcount<TotalFrames; ++fcount)
    for(fcount=0; fcount<1; ++fcount)
    {
        // read a frame
        int status = frame_capture.read(frame);
        if( 0 == status ) break;

        // track object
        #ifndef ARMCC
        // MCPROF_START();
        #endif
        cv::Rect ms_rect =  ms.track(frame);
        #ifndef ARMCC
        // MCPROF_STOP();
        #endif
        
        // mark the tracked object in frame
        cv::rectangle(frame,ms_rect,cv::Scalar(0,0,255),3);

        // write the frame
        writer << frame;
    }
    #ifndef ARMCC
    MCPROF_STOP();
    #endif
    totalTimer.Pause();

    totalTimer.Print();

    std::cout << "Processed " << fcount << " frames" << std::endl;
    std::cout << "Time: " << totalTimer.GetTime() <<" sec\nFPS : " << fcount/totalTimer.GetTime() << std::endl;


	Timer sqrtTimer("sqrt timer");
	float i, val,val2;
	float error = 0, mean = 0;

	sqrtTimer.Start();
	
	for (i = 0.6; i < 1.2; i+=0.0001) {
		val = sqrt(i);
		val2 = sqrt1(i);
		printf("%f %f %f \n",val,val2, fabs(val - val2));
		
		error += fabs(val - val2);
		mean += val;

	}
	printf("avg error in percentage: %f \n",error/mean);
	sqrtTimer.Stop();
	sqrtTimer.Print();
	
	

    return 0;
}

