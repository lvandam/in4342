/*
 * Based on paper "Kernel-Based Object Tracking"
 * you can find all the formula in the paper
*/

#include"meanshift.h"
#include"arm_neon.h"
#include "Timer.h"

MeanShift::MeanShift()
{
    cfg.MaxIter = 8;
    cfg.num_bins = 16;
    cfg.piexl_range = 256;
    bin_width = cfg.piexl_range / cfg.num_bins;
}

float32x4_t vectordivide (float32x4_t value_a, float32x4_t value_b) {
	
	// SOURCE: https://stackoverflow.com/questions/6759897/how-to-divide-in-neon-intrinsics-by-a-float-number

	float32x4_t reciprocal = vrecpeq_f32(value_b);
		
	reciprocal = vmulq_f32(vrecpsq_f32(value_b, reciprocal), reciprocal);
	reciprocal = vmulq_f32(vrecpsq_f32(value_b, reciprocal), reciprocal);
	
	return vmulq_f32(value_a,reciprocal);	
}

float32x4_t vectorsqrt (float32x4_t input) {

	//TODO should be made a bit more accurate
	//return vmulq_f32(vrsqrteq_f32(input), input); //-> more inaccurate but faster!
	float32x4_t sqrt_reciprocal = vrsqrteq_f32(input);
    
    float32x4_t temp = vrsqrtsq_f32(input * sqrt_reciprocal, sqrt_reciprocal) * sqrt_reciprocal;
    return input * temp;

}


void  MeanShift::Init_target_frame(const cv::Mat &frame,const cv::Rect &rect)
{
    target_Region = rect;
    kernel = cv::Mat(rect.height,rect.width,CV_32F,cv::Scalar(0));
    //normalized_C = 1.0 / Epanechnikov_kernel(kernel);

    Epanechnikov_kernel(kernel);

    target_model = pdf_representation_target(frame,target_Region);
}

void  MeanShift::Epanechnikov_kernel(cv::Mat &kernel)
{
    int h = kernel.rows;
    int w = kernel.cols;

    float epanechnikov_cd = 0.1*PI*h*w;
    //float kernel_sum = 0.0;
    for(int i=0;i<h;i++)
    {
        for(int j=0;j<w;j++)
        {
            float x = static_cast<float>(i - h/2);
            float  y = static_cast<float> (j - w/2);
            float norm_x = x*x/(h*h/4)+y*y/(w*w/4);
            float result =norm_x<1?(epanechnikov_cd*(1.0-norm_x)):0;
            kernel.at<float>(i,j) = result/300;
            //kernel_sum += result;
        }
    }
    //return kernel_sum;
}

cv::Mat MeanShift::pdf_representation_target(const cv::Mat &frame, const cv::Rect &rect)
{
    cv::Mat pdf_model(3, 16, CV_32SC1, cv::Scalar(1e-10));

    cv::Vec3f curr_pixel_value;
    cv::Vec3f bin_value;

    int row_index = rect.y;
    int clo_index = rect.x;

    for(int i=0;i<rect.height;i++)
    {
        clo_index = rect.x;
        for(int j=0;j<rect.width;j++)
        {
            curr_pixel_value = frame.at<cv::Vec3b>(row_index,clo_index);
            bin_value[0] = (curr_pixel_value[0]/bin_width);
            bin_value[1] = (curr_pixel_value[1]/bin_width);
            bin_value[2] = (curr_pixel_value[2]/bin_width);
            pdf_model.at<float>(0,bin_value[0]) += kernel.at<float>(i,j);
            pdf_model.at<float>(1,bin_value[1]) += kernel.at<float>(i,j);
            pdf_model.at<float>(2,bin_value[2]) += kernel.at<float>(i,j);

            clo_index++;
        }
        row_index++;
    }


    return pdf_model;
}

cv::Mat MeanShift::pdf_representation(cv::Mat &frameLayer, const cv::Rect &rect)
{
    cv::Mat pdf_model(1, 16, CV_32F, cv::Scalar(1e-10));

    uint8x16_t curr_pixel_value_neon, bin_value_neon;
    static uint8_t bin_array[16];

    int row_index = rect.y;
    int clo_index = rect.x;


    for(int i = 0; i < rect.height;i++)
    {
        clo_index = rect.x;
        for(int j=0;j<rect.width;j+=16)
        {
            int size = rect.width - j<16? rect.width -j : 16;
            curr_pixel_value_neon = vld1q_u8 ((const uint8_t*) frameLayer.ptr(row_index,clo_index));
            bin_value_neon = vshrq_n_u8(curr_pixel_value_neon, 4);
            vst1q_u8(bin_array, bin_value_neon);

            for(int k = 0; k < size; k++)
            {
            // Dividing by 30000 gives a correct results. Figure out uints!
            pdf_model.at<float>(0, bin_array[k]) += kernel.at<float>(i,j+k);
            }
             clo_index+=16;
        }
        row_index++;
    }

    return pdf_model;
}

cv::Mat MeanShift::CalWeight(cv::Mat &frameLayer, int k, cv::Mat &target_model,
                    cv::Mat &target_candidate, cv::Rect &rec)
{
    int rows = rec.height;
    int cols = rec.width;
    int row_index = rec.y;
    int col_index = rec.x;
    uint8x16_t curr_pixel_value_neon, bin_value_neon;
    static uint8_t bin_array[16];
	float32_t model[16], candidate[16], result[16];
	float32x4x4_t model_neon, candidate_neon, result_neon;

    cv::Mat weight(rows, cols, CV_32F, cv::Scalar(0.0000));

    row_index = rec.y;
    for(int i=0;i<rows;i++)
    {
        col_index = rec.x;

        for(int j=0;j<cols;j+=16)
        {
        	// Compute bin values of 16 pixels
            int size = rec.width - j<16? rec.width -j : 16;
            curr_pixel_value_neon = vld1q_u8 ((const uint8_t*) frameLayer.ptr(row_index,col_index));
            bin_value_neon = vshrq_n_u8(curr_pixel_value_neon, 4);
            vst1q_u8(bin_array, bin_value_neon);

			// Read in 16 model values, store as 32x4x4 float 
			for (int z =0;z<16;z++) {
				model[z]=target_model.at<float>(k, bin_array[z]);
			}	
			model_neon = vld4q_f32((const float32_t *)&model);

			// Read in 16 candidate values, store as 32x4x4 float
			for (int z =0;z<16;z++) {
				candidate[z]=target_candidate.at<float>(0, bin_array[z]);
			}	
			candidate_neon = vld4q_f32((const float32_t *)&candidate);
			//printf("normal: model %f candidate %f div %f sqrt %f \n",model[0],candidate[0],model[0]/candidate[0],sqrt(model[0]/candidate[0]) );
			
			// Divide model by candidate
			for (int z = 0; z < 4; z++) {
				result_neon.val[z] = vectordivide(model_neon.val[z],candidate_neon.val[z]);
			}

			//float32_t div[16];
			//vst4q_f32(div,result_neon);
			//float32x4x4_t temp;
			
			// Divide model by candidate
			//for (int z = 0; z < 4; z++) {
			//	temp.val[z] = vectorsqrt(result_neon.val[z]);
			//}			
			

			// Store result in weight matrix
			vst4q_f32(result,result_neon);
			
			//printf("neon: model %f candidate %f div %f sqrt %f \n",model[0],candidate[0],result[0],result[0] );

			for (int g = 0; g < size; g++) {

			
				//if (i < 4) printf("normal %f neon %f before %f  ",sqrt(model[g]/candidate[g]),sqrt(result[g]),weight.at<float>(i,j+g));
				weight.at<float>(i,j+g) = sqrt(result[g]);
				//if (i < 4) printf("after %f \n",weight.at<float>(i,j+g));
				
				//weight.at<float>(i,j+g) = sqrt(model[g]/candidate[g]);	
				//
			}			
			//printf("\n");
            col_index+=16;
        }

        row_index++;
    }
	//printf("weight calweight %f \n",weight.at<float>(0,0));
    return weight;
}

cv::Rect MeanShift::track(const cv::Mat &next_frame)
{
    cv::Rect next_rect;
      //Timer loopTimer("Outer loop timer");
    std::vector<cv::Mat> bgr_planes;
    cv::split(next_frame, bgr_planes);

    for(int iter=0;iter<cfg.MaxIter;iter++)
    {
      //loopTimer.Start();
        cv::Mat target_candidate0 = pdf_representation(bgr_planes[0], target_Region);
        cv::Mat weight0 = CalWeight(bgr_planes[0], 0, target_model, target_candidate0, target_Region);
        //printf("weight0 %f iter %d \n",weight0.at<float>(0,0),iter);

        cv::Mat target_candidate1 = pdf_representation(bgr_planes[1], target_Region);
        cv::Mat weight1 = CalWeight(bgr_planes[1], 1, target_model, target_candidate1, target_Region);
		//printf("weight1 %f iter %d \n",weight1.at<float>(0,0),iter);
        cv::Mat target_candidate2 = pdf_representation(bgr_planes[2], target_Region);
        cv::Mat weight2 = CalWeight(bgr_planes[2], 2, target_model, target_candidate2, target_Region);
        //printf("weight2 %f iter %d \n",weight2.at<float>(0,0),iter);
        // loopTimer.Pause();
        // loopTimer.Print();
        // exit (EXIT_FAILURE);

        // Merge back intermediate results
        cv::Mat weight = weight0.mul(weight1.mul(weight2));



        float delta_x = 0.0;
        float sum_wij = 0.0;
        float delta_y = 0.0;
        float centre = static_cast<float>((weight.rows-1)/2.0);
        double mult = 0.0;

        next_rect.x = target_Region.x;
        next_rect.y = target_Region.y;
        next_rect.width = target_Region.width;
        next_rect.height = target_Region.height;

		//printf("Target region x %d y %d \n",next_rect.x,next_rect.y);

        for(int i=0;i<weight.rows;i++)
        {
            for(int j=0;j<weight.cols;j++)
            {
              // Working commented on neon version for now
              // int size = cols - j<4? cols -j : 4;
              // float8x16_t norm_i, norm_j;
              //
                //printf("weight %f \n",weight.at<float>(i,j));
                float norm_i = static_cast<float>(i-centre)/centre;
                float norm_j = static_cast<float>(j-centre)/centre;
                mult = pow(norm_i,2)+pow(norm_j,2)>1.0?0.0:1.0;
                delta_x += static_cast<float>(norm_j*weight.at<float>(i,j)*mult);
                delta_y += static_cast<float>(norm_i*weight.at<float>(i,j)*mult);
                sum_wij += static_cast<float>(weight.at<float>(i,j)*mult);
            }
        }

        next_rect.x += static_cast<int>((delta_x/sum_wij)*centre);
        next_rect.y += static_cast<int>((delta_y/sum_wij)*centre);

		//printf("\t \t x %d y %d \n",next_rect.x,next_rect.y);
        if(abs(next_rect.x-target_Region.x)<1 && abs(next_rect.y-target_Region.y)<1)
        {
            break;
        }
        else
        {
            target_Region.x = next_rect.x;
            target_Region.y = next_rect.y;
        }
    }

    return next_rect;
}
